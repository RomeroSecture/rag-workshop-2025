# DESAF√çO ADICIONAL: Smart Chunking - NIVEL 2 WORKSHOP
# Celda 18 del notebook - Chunking inteligente que respeta l√≠mites de frases

import sys
from pathlib import Path
sys.path.append(str(Path.cwd().parent.parent / 'src'))

from typing import List
import re

print("üí™ DESAF√çO: Smart Chunking con l√≠mites de frases")
print("=" * 60)


def smart_chunking(text: str, chunk_size: int = 500, overlap: int = 100) -> List[str]:
    """
    Chunking inteligente que:
    - No corta frases a la mitad
    - Respeta p√°rrafos cuando sea posible
    - Mantiene contexto entre chunks con overlap

    Args:
        text: Texto a dividir
        chunk_size: Tama√±o objetivo del chunk
        overlap: Caracteres de overlap entre chunks

    Returns:
        Lista de chunks
    """
    # Limpiar texto
    text = text.strip()

    # Detectar l√≠mites de frases (., !, ?, \n\n)
    sentence_endings = r'[.!?]\s+|\n\n'

    # Dividir en frases
    sentences = re.split(sentence_endings, text)
    sentences = [s.strip() for s in sentences if s.strip()]

    chunks = []
    current_chunk = ""
    previous_chunk_end = ""

    for sentence in sentences:
        # Si a√±adir esta frase excede el tama√±o
        if len(current_chunk) + len(sentence) > chunk_size:
            # Si el chunk actual tiene contenido, guardarlo
            if current_chunk:
                # A√±adir overlap del chunk anterior
                if previous_chunk_end:
                    full_chunk = previous_chunk_end + " " + current_chunk
                else:
                    full_chunk = current_chunk

                chunks.append(full_chunk.strip())

                # Guardar overlap para el siguiente chunk
                words = current_chunk.split()
                overlap_words = []
                overlap_chars = 0

                # Tomar √∫ltimas palabras hasta completar overlap
                for word in reversed(words):
                    if overlap_chars + len(word) < overlap:
                        overlap_words.insert(0, word)
                        overlap_chars += len(word) + 1
                    else:
                        break

                previous_chunk_end = " ".join(overlap_words)

                # Empezar nuevo chunk con la frase actual
                current_chunk = sentence
            else:
                # Si una sola frase es muy larga, dividirla por palabras
                if len(sentence) > chunk_size * 1.5:
                    words = sentence.split()
                    temp_chunk = ""

                    for word in words:
                        if len(temp_chunk) + len(word) > chunk_size:
                            if temp_chunk:
                                chunks.append(temp_chunk.strip())
                                temp_chunk = word
                        else:
                            temp_chunk += " " + word if temp_chunk else word

                    current_chunk = temp_chunk
                else:
                    current_chunk = sentence
        else:
            # A√±adir frase al chunk actual
            current_chunk += " " + sentence if current_chunk else sentence

    # A√±adir √∫ltimo chunk
    if current_chunk:
        if previous_chunk_end:
            full_chunk = previous_chunk_end + " " + current_chunk
        else:
            full_chunk = current_chunk
        chunks.append(full_chunk.strip())

    return chunks


# ===== TEST Y COMPARACI√ìN =====

# Texto de ejemplo con frases cortadas
test_text = """
La pol√≠tica de vacaciones de la empresa es clara. Todos los empleados tienen derecho a vacaciones pagadas.

Los empleados nuevos (0-5 a√±os) reciben 22 d√≠as h√°biles al a√±o. Los empleados senior (5-10 a√±os) reciben 25 d√≠as h√°biles. Los empleados veteranos (m√°s de 10 a√±os) reciben 30 d√≠as h√°biles.

Adem√°s, hay d√≠as adicionales por antig√ºedad. Por cada 5 a√±os adicionales, se otorgan 2 d√≠as extra. Los empleados pueden comprar hasta 5 d√≠as adicionales de vacaciones por a√±o.

Las vacaciones deben solicitarse con al menos 2 semanas de anticipaci√≥n. La aprobaci√≥n est√° sujeta a las necesidades del equipo y la disponibilidad de personal.
"""

print("\n1Ô∏è‚É£ CHUNKING B√ÅSICO (sin smart chunking):")
print("="*60)

# Chunking b√°sico (corta en cualquier posici√≥n)
basic_chunks = []
chunk_size = 150
for i in range(0, len(test_text), chunk_size):
    basic_chunks.append(test_text[i:i+chunk_size])

for i, chunk in enumerate(basic_chunks, 1):
    print(f"\nChunk {i} ({len(chunk)} chars):")
    print(f"'{chunk}'")
    # Detectar si corta a mitad de frase
    if not chunk.rstrip().endswith(('.', '!', '?', '\n')):
        print("   ‚ö†Ô∏è  CORTADO A MITAD DE FRASE")

print("\n\n2Ô∏è‚É£ SMART CHUNKING (respeta l√≠mites):")
print("="*60)

smart_chunks = smart_chunking(test_text, chunk_size=150, overlap=30)

for i, chunk in enumerate(smart_chunks, 1):
    print(f"\nChunk {i} ({len(chunk)} chars):")
    print(f"'{chunk}'")

    # Verificar que termina en l√≠mite de frase
    ends_properly = chunk.rstrip().endswith(('.', '!', '?')) or '\n\n' in chunk
    if ends_properly:
        print("   ‚úÖ Termina correctamente")
    else:
        print("   ‚ö†Ô∏è  No termina en l√≠mite de frase")

# Comparaci√≥n de m√©tricas
print("\n\nüìä COMPARACI√ìN:")
print("="*60)
print(f"Chunking B√°sico:")
print(f"   - Total chunks: {len(basic_chunks)}")
print(f"   - Tama√±o promedio: {sum(len(c) for c in basic_chunks) / len(basic_chunks):.0f} chars")
print(f"   - Chunks cortados: {sum(1 for c in basic_chunks if not c.rstrip().endswith(('.', '!', '?', '\n')))}")

print(f"\nSmart Chunking:")
print(f"   - Total chunks: {len(smart_chunks)}")
print(f"   - Tama√±o promedio: {sum(len(c) for c in smart_chunks) / len(smart_chunks):.0f} chars")
print(f"   - Chunks cortados: {sum(1 for c in smart_chunks if not c.rstrip().endswith(('.', '!', '?')))}")

# Verificar overlap
print(f"\nüîó Verificaci√≥n de overlap:")
for i in range(len(smart_chunks) - 1):
    # Encontrar overlap entre chunks consecutivos
    chunk1_end = smart_chunks[i][-50:]  # √öltimos 50 chars
    chunk2_start = smart_chunks[i+1][:50]  # Primeros 50 chars

    # Buscar palabras comunes
    words1 = set(chunk1_end.split())
    words2 = set(chunk2_start.split())
    overlap_words = words1.intersection(words2)

    if overlap_words:
        print(f"   Chunks {i+1}-{i+2}: {len(overlap_words)} palabras compartidas")
    else:
        print(f"   Chunks {i+1}-{i+2}: Sin overlap detectado")

print("\n\nüí° BENEFICIOS DEL SMART CHUNKING:")
print("="*60)
print("""
‚úÖ Preserva el significado completo de las frases
‚úÖ Mejora la comprensi√≥n del contexto
‚úÖ Reduce fragmentaci√≥n de informaci√≥n
‚úÖ Mantiene coherencia tem√°tica
‚úÖ Facilita el retrieval sem√°ntico m√°s preciso

üéØ Ideal para:
   - Documentos t√©cnicos con procedimientos paso a paso
   - Manuales con instrucciones espec√≠ficas
   - Documentos legales donde cada frase es importante
   - FAQs donde cada pregunta/respuesta es una unidad completa
""")

# Integraci√≥n con RAG
print("\nüîß INTEGRACI√ìN CON RAG:")
print("="*60)
print("""
Para usar smart_chunking en tu RAG:

1. Reemplaza el m√©todo create_chunks() en tu clase RAG:

   class MyRAG(Module2_OptimizedRAG):
       def create_chunks(self, text: str) -> List[str]:
           return smart_chunking(
               text,
               chunk_size=self.chunk_size,
               overlap=self.chunk_overlap
           )

2. Prueba con tus documentos reales

3. Compara m√©tricas de calidad vs chunking b√°sico
""")
